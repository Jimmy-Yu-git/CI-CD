type Query {
  users: [User!]
  events: [Event!]!
  chatbox(name1 : String ,name2 : String) : ChatBox
}

type User {
  _id: ID!
  name: String
}
type Subscription {
  message(name1 : String ,name2 : String): chatboxSubscriptionPayload
  allmessage : chatboxSubscriptionPayload
}
enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type chatboxSubscriptionPayload {
  mutation: MutationType!
  data: Message
}

type Mutation {
  createChatBox(name1 : String ,name2 : String) : ChatBox
  createEvent(data: EventInput ) : Event
  createMessage(key : String , body : String , me : String) : Message
}

type ChatBox{
  _id : ID!
  name : String
  messages : [Message]
}
type Message{
  sender : [Users]
  body : String
  time : String
  date : String
}
type Users{
  name : String
}










type Event {
          _id: ID!
          title: String!
          description: String!
          price: Float!
        }
input EventInput {
  title: String!
  description: String!
  price: Float!
}
