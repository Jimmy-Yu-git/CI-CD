{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u78A9\\u4E00\\u4E0B\\\\\\u7DB2\\u8DEF\\u670D\\u52D9\\\\Chatroom GraphQL\\\\frontend\\\\src\\\\container\\\\chatroom.js\",\n    _s = $RefreshSig$();\n\nimport \"../App.css\";\nimport ChatModal from \"../component/chatModels\"; //import useChatBox from \"../hooks/useChatBox\"\n\nimport { useQuery, useMutation, useSubscription } from '@apollo/react-hooks';\nimport useChat from \"../hooks/useChat\";\nimport { useState, useEffect } from \"react\";\nimport { Tabs, Input } from \"antd\";\nimport { CREATE_CHATBOX_MUTATION, CREATE_MESSAGE_MUTATION, CHATBOX_QUERY, MESSAGE_SUBSCRIPTION, AllMessage_Sub } from '../graphql';\nimport { isTypeNode } from \"graphql\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  TabPane\n} = Tabs;\n\nconst ChatRoom = ({\n  me,\n  displayStatus\n}) => {\n  _s();\n\n  // const [chatBoxes, setChatBoxes] = useState([\n  //     {\n  //         friend: \"Mary\", key: \"MaryChatbox\",\n  //         chatLog: []\n  //     },\n  //     {\n  //         friend: \"Peter\", key: \"PeterChatBox\",\n  //         chatLog: []\n  //     }\n  // ]);\n  const [name1, setName1] = useState(\"\");\n  const [name2, setName2] = useState(\"\");\n  const [ispush, setIspush] = useState(false);\n  const [messageInput, setMessageInput] = useState(\"\");\n  const [chatBoxes, setChatBoxes] = useState([]);\n  const [modalVisible, setModalVisible] = useState(false);\n\n  const addChatBox = () => {\n    setModalVisible(true);\n  };\n\n  const [activeKey, setActiveKey] = useState(\"\");\n  console.log(activeKey);\n  const [addChat] = useMutation(CREATE_CHATBOX_MUTATION);\n  const [addMessage] = useMutation(CREATE_MESSAGE_MUTATION);\n  let myname;\n  let first;\n  let second;\n  useEffect(() => {\n    console.log(\"active\");\n    console.log(activeKey);\n\n    if (activeKey) {\n      console.log(activeKey);\n      myname = activeKey.split(\"_\");\n      console.log(myname);\n\n      if (myname[0] === me) {\n        first = myname[0];\n        second = myname[1];\n      } else {\n        first = myname[1];\n        second = myname[0];\n      }\n\n      setName1(first);\n      setName2(second);\n    }\n  }, [activeKey]);\n  console.log(name2);\n  const {\n    loading,\n    error,\n    data,\n    subscribeToMore\n  } = useQuery(CHATBOX_QUERY, {\n    variables: {\n      name1: name1,\n      name2: name2 // name1: \"jimmy\",\n      // name2: \"peter\",\n\n    }\n  });\n  console.log(data);\n\n  if (typeof data === \"undefined\") {\n    console.log(\"111\");\n  } // if(data.chatbox===null){\n  //     console.log(\"null\")\n  // }\n\n\n  useEffect(() => {\n    console.log('11');\n    subscribeToMore({\n      document: AllMessage_Sub,\n      // variables: {\n      //     name1: name1,\n      //     name2: name2,\n      // },\n      updateQuery: (prev, {\n        subscriptionData\n      }) => {\n        console.log('11'); // console.log(prev.chatbox.messages)\n        // console.log(subscriptionData)\n        // let newchat = chatBoxes\n        // if (!subscriptionData.data.allmessage) {\n        //     console.log(\"12445789\")\n        //     console.log(prev);\n        //     newchat.push({ friend: name2, key: activeKey, chatLog: prev.chatbox.messages });\n        //     console.log(newchat);\n        //     setChatBoxes(newchat);\n        //     return prev;\n        // }\n\n        const newMess = subscriptionData.data.allmessage.data; // console.log(newMess);\n        // newchat.push({ friend: name2, key: activeKey, chatLog: prev.chatbox.messages });\n        // console.log(newchat);\n        // setChatBoxes(newchat);\n        // newchat = {friend : name2,key : activeKey ,chatLog : data};\n\n        return { ...prev,\n          // posts: [newPost, ...prev.posts]\n          chatbox: [...prev.chatbox.messages, newMess]\n        };\n      }\n    }); // let newchat = {friend : name2,key : activeKey ,chatLog : data};\n    // console.log(newchat)\n    // console.log(\"123\")\n  }, [subscribeToMore]);\n  let newbox = [];\n  console.log(\"render\");\n  console.log(chatBoxes); // useEffect(()=>{\n  //     console.log(\"888\")\n  //     console.log(data)\n  //     if(typeof data !== \"undefined\" && data.chatbox !== null){\n  //         console.log(\"888\")\n  //         console.log(data)\n  //         newbox = chatBoxes\n  //         console.log(data.chatbox.messages)\n  //         newbox.push({friend:name2,key:data.chatbox.name,chatLog:data.chatbox.messages});\n  //         console.log(newbox)\n  //     }\n  // },[ispush])\n  // const { loading, error, data  } = useSubscription(\n  //     MESSAGE_SUBSCRIPTION,\n  //     { variables: {\n  //         name1: name1,\n  //         name2: name2,\n  //         } \n  //     }\n  //     );\n  // console.log(data)\n  //console.log(data2)\n  // if(data.chatbox){\n  //     let filter =data.chatbox.messages.map(e=>e.body)\n  //     console.log(filter)\n  // } \n  //data will be unndeefined\n  // const pushdata = (friend,me) => {\n  //     chatBoxes.push({friend:friend,key:activeKey,chatLog:data.chatBox.messages});\n  //     console.log(chatBoxes)\n  // }\n  //data will be unndeefined\n  //msg.push(inputmsg[0]);\n  // useEffect(() => {\n  //     console.log('execute function in useEffect');\n  //   },[inputmsg]);\n\n  const sendMessage = payload => {\n    console.log(payload); // key:11_1 body:'messenge'\n\n    addMessage({\n      variables: {\n        key: payload.key,\n        body: payload.body,\n        me: payload.sender\n      }\n    }); // SendData({\n    //     type: 'Message',\n    //     data: { key: payload.key, body: payload.body, me: payload.sender },\n    // })\n  }; //CHAT MODELS CALL\n\n\n  const createChatBox = (friend, me) => {\n    //比對字串大小\n    // const { loading, error, data,refetch,subscribeToMore } = useQuery(CHATBOX_QUERY,{\n    //     variables: {\n    //         name1: me,\n    //         name2: friend,\n    //     },\n    // });\n    addChat({\n      variables: {\n        name1: me,\n        name2: friend\n      }\n    });\n    setName1(me);\n    setName2(friend); // pushdata(friend,me)\n    // const newKey = me <= friend ?\n    //     `${me}_${friend}` : `${friend}_${me}`;\n\n    const newKey = [me, friend].sort().join('_');\n    console.log(newKey);\n\n    if (chatBoxes.some(({\n      key\n    }) => key === newKey)) {\n      throw new Error(friend + \"'s chat box has already opened.\");\n    }\n\n    const newChatBoxes = [...chatBoxes];\n    const chatLog = [];\n    newChatBoxes.push({\n      friend,\n      key: newKey,\n      chatLog\n    });\n    setChatBoxes(newChatBoxes);\n    setActiveKey(newKey);\n    setIspush(true);\n  };\n\n  const removeChatBox = (targetKey, activeKey) => {\n    let newActiveKey = activeKey; //index before\n\n    let lastIndex;\n    chatBoxes.forEach(({\n      key\n    }, i) => {\n      if (key === targetKey) {\n        lastIndex = i - 1;\n      }\n    });\n    const newChatBoxes = chatBoxes.filter(chatBox => chatBox.key !== targetKey);\n\n    if (newChatBoxes.length) {\n      if (newActiveKey === targetKey) {\n        if (lastIndex >= 0) {\n          newActiveKey = newChatBoxes[lastIndex].key;\n        } else {\n          newActiveKey = newChatBoxes[0].key;\n        }\n      }\n    } else newActiveKey = \"\"; //No chatBox left\n\n\n    setChatBoxes(newChatBoxes);\n    setActiveKey(newActiveKey);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App-title\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [me, \"'s Chat Room\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App-messages\",\n      children: [/*#__PURE__*/_jsxDEV(Tabs, {\n        type: \"editable-card\",\n        activeKey: activeKey,\n        onChange: key => {\n          setActiveKey(key);\n          alert(key);\n        } //按+號時\n        ,\n        onEdit: (targetKey, action) => {\n          if (action === \"add\") addChatBox();else if (action === \"remove\") removeChatBox(targetKey, activeKey, setActiveKey);\n        },\n        children: chatBoxes.map(({\n          friend,\n          key,\n          chatLog\n        }) => {\n          return /*#__PURE__*/_jsxDEV(TabPane, {\n            tab: friend,\n            closable: true,\n            children: typeof data === \"undefined\" || data.chatbox === null ? /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Loading...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 94\n            }, this) : data.chatbox.messages.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"NO MESSAGE..\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 76\n            }, this) : data.chatbox.messages.map(({\n              sender,\n              body\n            }, i) => {\n              if (sender[0].name !== me) {\n                return /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [sender[0].name, \":\", body]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 269,\n                  columnNumber: 53\n                }, this);\n              } else {\n                return /*#__PURE__*/_jsxDEV(\"p\", {\n                  style: {\n                    textAlign: \"right\"\n                  },\n                  children: [body, \":\", sender[0].name]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 274,\n                  columnNumber: 53\n                }, this);\n              }\n            })\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ChatModal, {\n        visible: modalVisible,\n        onCreate: ({\n          name\n        }) => {\n          createChatBox(name, me, setActiveKey);\n          setModalVisible(false);\n        },\n        onCancel: () => {\n          setModalVisible(false);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Input.Search, {\n      value: messageInput,\n      onChange: e => setMessageInput(e.target.value),\n      enterButton: \"Send\",\n      placeholder: \"Enter message here...\",\n      onSearch: msg => {\n        if (!msg) {\n          displayStatus({\n            type: \"error\",\n            msg: \"Please enter message.\"\n          });\n          return;\n        } else if (activeKey === \"\") {\n          displayStatus({\n            type: \"error\",\n            msg: \"Please add a chatbox first.\"\n          });\n          setMessageInput(\"\");\n          return;\n        }\n\n        sendMessage({\n          key: activeKey,\n          body: msg,\n          sender: me\n        });\n        setMessageInput(\"\");\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ChatRoom, \"rZnGuh2Ev/4hc6ArUsl77/+gFf8=\", false, function () {\n  return [useMutation, useMutation, useQuery];\n});\n\n_c = ChatRoom;\nexport default ChatRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"sources":["D:/碩一下/網路服務/Chatroom GraphQL/frontend/src/container/chatroom.js"],"names":["ChatModal","useQuery","useMutation","useSubscription","useChat","useState","useEffect","Tabs","Input","CREATE_CHATBOX_MUTATION","CREATE_MESSAGE_MUTATION","CHATBOX_QUERY","MESSAGE_SUBSCRIPTION","AllMessage_Sub","isTypeNode","TabPane","ChatRoom","me","displayStatus","name1","setName1","name2","setName2","ispush","setIspush","messageInput","setMessageInput","chatBoxes","setChatBoxes","modalVisible","setModalVisible","addChatBox","activeKey","setActiveKey","console","log","addChat","addMessage","myname","first","second","split","loading","error","data","subscribeToMore","variables","document","updateQuery","prev","subscriptionData","newMess","allmessage","chatbox","messages","newbox","sendMessage","payload","key","body","sender","createChatBox","friend","newKey","sort","join","some","Error","newChatBoxes","chatLog","push","removeChatBox","targetKey","newActiveKey","lastIndex","forEach","i","filter","chatBox","length","alert","action","map","name","textAlign","e","target","value","msg","type"],"mappings":"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","sourcesContent":["import \"../App.css\";\r\nimport ChatModal from \"../component/chatModels\"\r\n//import useChatBox from \"../hooks/useChatBox\"\r\nimport { useQuery, useMutation, useSubscription } from '@apollo/react-hooks';\r\nimport useChat from \"../hooks/useChat\"\r\nimport { useState, useEffect } from \"react\";\r\nimport { Tabs, Input } from \"antd\";\r\nimport {\r\n    CREATE_CHATBOX_MUTATION,\r\n    CREATE_MESSAGE_MUTATION,\r\n    CHATBOX_QUERY,\r\n    MESSAGE_SUBSCRIPTION,\r\n    AllMessage_Sub,\r\n} from '../graphql';\r\nimport { isTypeNode } from \"graphql\";\r\nconst { TabPane } = Tabs;\r\nconst ChatRoom = ({ me, displayStatus }) => {\r\n    // const [chatBoxes, setChatBoxes] = useState([\r\n    //     {\r\n    //         friend: \"Mary\", key: \"MaryChatbox\",\r\n    //         chatLog: []\r\n    //     },\r\n    //     {\r\n    //         friend: \"Peter\", key: \"PeterChatBox\",\r\n    //         chatLog: []\r\n    //     }\r\n    // ]);\r\n    const [name1, setName1] = useState(\"\");\r\n    const [name2, setName2] = useState(\"\");\r\n    const [ispush, setIspush] = useState(false);\r\n    const [messageInput, setMessageInput] = useState(\"\");\r\n    const [chatBoxes, setChatBoxes] = useState([]);\r\n    const [modalVisible, setModalVisible] = useState(false);\r\n    const addChatBox = () => { setModalVisible(true); };\r\n    const [activeKey, setActiveKey] = useState(\"\")\r\n    console.log(activeKey)\r\n    const [addChat] = useMutation(CREATE_CHATBOX_MUTATION);\r\n    const [addMessage] = useMutation(CREATE_MESSAGE_MUTATION);\r\n    let myname\r\n    let first\r\n    let second\r\n    useEffect(() => {\r\n        console.log(\"active\")\r\n        console.log(activeKey)\r\n        if (activeKey) {\r\n            console.log(activeKey)\r\n            myname = activeKey.split(\"_\")\r\n            console.log(myname)\r\n            if (myname[0] === me) {\r\n                first = myname[0]\r\n                second = myname[1]\r\n            }\r\n            else {\r\n                first = myname[1]\r\n                second = myname[0]\r\n            }\r\n            setName1(first)\r\n            setName2(second)\r\n        }\r\n\r\n    }, [activeKey])\r\n    console.log(name2)\r\n\r\n    const { loading, error, data, subscribeToMore } = useQuery(CHATBOX_QUERY, {\r\n        variables: {\r\n            name1: name1,\r\n            name2: name2,\r\n            // name1: \"jimmy\",\r\n            // name2: \"peter\",\r\n        },\r\n    })\r\n    console.log(data)\r\n    if (typeof (data) === \"undefined\") {\r\n        console.log(\"111\")\r\n    }\r\n    // if(data.chatbox===null){\r\n    //     console.log(\"null\")\r\n    // }\r\n    useEffect(() => {\r\n        console.log('11')\r\n        subscribeToMore({\r\n            document: AllMessage_Sub,\r\n            // variables: {\r\n            //     name1: name1,\r\n            //     name2: name2,\r\n            // },\r\n            updateQuery: (prev, { subscriptionData }) => {\r\n                console.log('11')\r\n                // console.log(prev.chatbox.messages)\r\n                // console.log(subscriptionData)\r\n                // let newchat = chatBoxes\r\n                // if (!subscriptionData.data.allmessage) {\r\n                //     console.log(\"12445789\")\r\n                //     console.log(prev);\r\n                //     newchat.push({ friend: name2, key: activeKey, chatLog: prev.chatbox.messages });\r\n                //     console.log(newchat);\r\n                //     setChatBoxes(newchat);\r\n                //     return prev;\r\n                // }\r\n                const newMess = subscriptionData.data.allmessage.data\r\n                // console.log(newMess);\r\n                // newchat.push({ friend: name2, key: activeKey, chatLog: prev.chatbox.messages });\r\n                // console.log(newchat);\r\n                // setChatBoxes(newchat);\r\n                // newchat = {friend : name2,key : activeKey ,chatLog : data};\r\n                return {\r\n                    ...prev,\r\n                    // posts: [newPost, ...prev.posts]\r\n                    chatbox: [...prev.chatbox.messages, newMess]\r\n                }\r\n            }\r\n        })\r\n\r\n        // let newchat = {friend : name2,key : activeKey ,chatLog : data};\r\n        // console.log(newchat)\r\n        // console.log(\"123\")\r\n    }, [subscribeToMore])\r\n\r\n\r\n    let newbox = []\r\n\r\n    console.log(\"render\")\r\n    console.log(chatBoxes)\r\n    // useEffect(()=>{\r\n    //     console.log(\"888\")\r\n    //     console.log(data)\r\n    //     if(typeof data !== \"undefined\" && data.chatbox !== null){\r\n    //         console.log(\"888\")\r\n    //         console.log(data)\r\n    //         newbox = chatBoxes\r\n    //         console.log(data.chatbox.messages)\r\n    //         newbox.push({friend:name2,key:data.chatbox.name,chatLog:data.chatbox.messages});\r\n    //         console.log(newbox)\r\n    //     }\r\n    // },[ispush])\r\n\r\n\r\n\r\n    // const { loading, error, data  } = useSubscription(\r\n    //     MESSAGE_SUBSCRIPTION,\r\n    //     { variables: {\r\n    //         name1: name1,\r\n    //         name2: name2,\r\n    //         } \r\n    //     }\r\n    //     );\r\n    // console.log(data)\r\n    //console.log(data2)\r\n\r\n\r\n\r\n    // if(data.chatbox){\r\n    //     let filter =data.chatbox.messages.map(e=>e.body)\r\n    //     console.log(filter)\r\n    // } \r\n\r\n    //data will be unndeefined\r\n    // const pushdata = (friend,me) => {\r\n    //     chatBoxes.push({friend:friend,key:activeKey,chatLog:data.chatBox.messages});\r\n    //     console.log(chatBoxes)\r\n    // }\r\n    //data will be unndeefined\r\n\r\n    //msg.push(inputmsg[0]);\r\n    // useEffect(() => {\r\n    //     console.log('execute function in useEffect');\r\n    //   },[inputmsg]);\r\n\r\n    const sendMessage = (payload) => {\r\n        console.log(payload);// key:11_1 body:'messenge'\r\n        addMessage({\r\n            variables: {\r\n                key: payload.key,\r\n                body: payload.body,\r\n                me: payload.sender,\r\n            },\r\n        });\r\n\r\n        // SendData({\r\n        //     type: 'Message',\r\n        //     data: { key: payload.key, body: payload.body, me: payload.sender },\r\n        // })\r\n    };\r\n    //CHAT MODELS CALL\r\n    const createChatBox = (friend, me) => {\r\n        //比對字串大小\r\n        // const { loading, error, data,refetch,subscribeToMore } = useQuery(CHATBOX_QUERY,{\r\n        //     variables: {\r\n        //         name1: me,\r\n        //         name2: friend,\r\n        //     },\r\n        // });\r\n        addChat({\r\n            variables: {\r\n                name1: me,\r\n                name2: friend,\r\n            },\r\n        });\r\n        setName1(me);\r\n        setName2(friend);\r\n\r\n\r\n\r\n        // pushdata(friend,me)\r\n        // const newKey = me <= friend ?\r\n        //     `${me}_${friend}` : `${friend}_${me}`;\r\n        const newKey = [me, friend].sort().join('_');\r\n        console.log(newKey)\r\n        if (chatBoxes.some(({ key }) => key === newKey)) {\r\n            throw new Error(friend +\r\n                \"'s chat box has already opened.\");\r\n        }\r\n        const newChatBoxes = [...chatBoxes];\r\n        const chatLog = [];\r\n        newChatBoxes.push({ friend, key: newKey, chatLog });\r\n        setChatBoxes(newChatBoxes);\r\n        setActiveKey(newKey);\r\n        setIspush(true);\r\n    };\r\n    const removeChatBox = (targetKey, activeKey) => {\r\n        let newActiveKey = activeKey;\r\n        //index before\r\n        let lastIndex;\r\n        chatBoxes.forEach(({ key }, i) => {\r\n            if (key === targetKey) { lastIndex = i - 1; }\r\n        });\r\n        const newChatBoxes = chatBoxes.filter(\r\n            (chatBox) => chatBox.key !== targetKey);\r\n        if (newChatBoxes.length) {\r\n            if (newActiveKey === targetKey) {\r\n                if (lastIndex >= 0) {\r\n                    newActiveKey = newChatBoxes[lastIndex].key;\r\n                } else { newActiveKey = newChatBoxes[0].key; }\r\n            }\r\n        } else newActiveKey = \"\";\r\n        //No chatBox left\r\n        setChatBoxes(newChatBoxes);\r\n        setActiveKey(newActiveKey);\r\n\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"App-title\">\r\n                <h1>{me}'s Chat Room</h1>\r\n            </div>\r\n            <div className=\"App-messages\">\r\n                <Tabs type=\"editable-card\"\r\n                    activeKey={activeKey}\r\n                    onChange={(key) => { setActiveKey(key);  alert(key)}}\r\n\r\n                    //按+號時\r\n                    onEdit={(targetKey, action) => {\r\n                        if (action === \"add\") addChatBox();\r\n                        else if (action === \"remove\") removeChatBox(targetKey, activeKey, setActiveKey)\r\n                    }}\r\n                >\r\n                    {chatBoxes.map(({ friend, key, chatLog }) => {\r\n                        return (\r\n                            <TabPane tab={friend}\r\n                                key={key} closable={true}>\r\n                                {(typeof (data) === \"undefined\" || data.chatbox === null) ? (<p>Loading...</p>) :\r\n                                    (data.chatbox.messages.length === 0 ? (<p>NO MESSAGE..</p>) : (\r\n                                        data.chatbox.messages.map(({ sender, body }, i) => {\r\n                                            if (sender[0].name !== me) {\r\n                                                return (\r\n                                                    <p >{sender[0].name}:{body}</p>\r\n                                                )\r\n                                            }\r\n                                            else {\r\n                                                return (\r\n                                                    <p style={{ textAlign: \"right\" }}>{body}:{sender[0].name}</p>\r\n                                                )\r\n                                            }\r\n                                        })\r\n                                    ))}\r\n                            </TabPane>\r\n                        );\r\n                    }\r\n                    )}\r\n                    {/* {(typeof(data) ===\"undefined\" || data.chatbox===null)?(<p>Loading ...</p>):\r\n            (data.chatbox.messages.length===0 ?\r\n                (<p style={{ color: '#ccc' }}>No messages...</p>):\r\n                (data.chatbox.messages.map(({sender,body},i)=>{\r\n                    if(sender.name!==me){\r\n                        return (\r\n                            <div className=\"bubbleWrapper\" key={i}>\r\n                                <div className=\"inlineContainer\">\r\n                                    <p>{sender.name}:{body}</p>\r\n                                </div>\r\n                            </div>)\r\n                    }\r\n                    else{\r\n                        return (\r\n                            <div className=\"bubbleWrapper\" key={i}>\r\n                                <div className=\"inlineContainer own\">\r\n                                     <p>{sender.name}:{body}</p>\r\n                                </div>\r\n                            </div>)\r\n                    }\r\n                })\r\n                )\r\n            )} */}\r\n                    {/* {\r\n                            msg.map(({ body, name })=>{\r\n                                return (\r\n                                    <TabPane tab={name }\r\n                                         closable={true}>\r\n                                        <p>{name}:{body}</p>\r\n                                    </TabPane>\r\n                                );\r\n                            })\r\n                    } */}\r\n                </Tabs>\r\n                <ChatModal\r\n                    visible={modalVisible}\r\n                    onCreate={({ name }) => {\r\n                        createChatBox(name, me, setActiveKey);\r\n                        setModalVisible(false);\r\n                    }}\r\n                    onCancel={() => {\r\n                        setModalVisible(false);\r\n                    }}\r\n                />\r\n\r\n            </div>\r\n            <Input.Search\r\n                value={messageInput}\r\n                onChange={(e) =>\r\n                    setMessageInput(e.target.value)}\r\n                enterButton=\"Send\"\r\n                placeholder=\r\n                \"Enter message here...\"\r\n                onSearch={(msg) => {\r\n                    if (!msg) {\r\n                        displayStatus({\r\n                            type: \"error\",\r\n                            msg: \"Please enter message.\",\r\n                        });\r\n                        return;\r\n                    } else if (activeKey === \"\") {\r\n                        displayStatus({\r\n                            type: \"error\",\r\n                            msg: \"Please add a chatbox first.\",\r\n                        });\r\n                        setMessageInput(\"\");\r\n                        return;\r\n                    }\r\n                    sendMessage({ key: activeKey, body: msg, sender: me });\r\n                    setMessageInput(\"\");\r\n                }}\r\n            >\r\n            </Input.Search>\r\n        </>\r\n    )\r\n\r\n}\r\nexport default ChatRoom;"]},"metadata":{},"sourceType":"module"}