{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u78A9\\u4E00\\u4E0B\\\\\\u7DB2\\u8DEF\\u670D\\u52D9\\\\Chatroom GraphQL\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ApolloClient, InMemoryCache, ApolloProvider, HttpLink } from \"@apollo/client\";\nimport { split } from \"apollo-link\";\nimport { WebSocketLink } from \"apollo-link-ws\";\nimport { getMainDefinition } from \"apollo-utilities\"; // Create an http link:\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst httpLink = new HttpLink({\n  uri: \"http://localhost:5000/\"\n}); // Create a WebSocket link:\n\nconst wsLink = new WebSocketLink({\n  uri: `ws://localhost:5000/`,\n  options: {\n    reconnect: true\n  }\n}); // using the ability to split links, you can send data to each link\n// depending on what kind of operation is being sent\n\nconst link = split( // split based on operation type\n({\n  query\n}) => {\n  const definition = getMainDefinition(query);\n  return definition.kind === 'OperationDefinition' && definition.operation === 'subscription';\n}, wsLink, httpLink);\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache().restore({})\n});\nReactDOM.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(ApolloProvider, {\n    client: client,\n    children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 45,\n  columnNumber: 3\n}, this), document.getElementById('root')); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();","map":{"version":3,"sources":["D:/碩一下/網路服務/Chatroom GraphQL/src/index.js"],"names":["React","ReactDOM","App","reportWebVitals","ApolloClient","InMemoryCache","ApolloProvider","HttpLink","split","WebSocketLink","getMainDefinition","httpLink","uri","wsLink","options","reconnect","link","query","definition","kind","operation","client","cache","restore","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,oBAAP;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SACEC,YADF,EAEEC,aAFF,EAGEC,cAHF,EAIEC,QAJF,QAKO,gBALP;AAMA,SAASC,KAAT,QAAsB,aAAtB;AACA,SAASC,aAAT,QAA8B,gBAA9B;AACA,SAASC,iBAAT,QAAkC,kBAAlC,C,CACA;;;AACA,MAAMC,QAAQ,GAAG,IAAIJ,QAAJ,CAAa;AAC5BK,EAAAA,GAAG,EAAE;AADuB,CAAb,CAAjB,C,CAGA;;AACA,MAAMC,MAAM,GAAG,IAAIJ,aAAJ,CAAkB;AAC/BG,EAAAA,GAAG,EAAG,sBADyB;AAE/BE,EAAAA,OAAO,EAAE;AAAEC,IAAAA,SAAS,EAAE;AAAb;AAFsB,CAAlB,CAAf,C,CAIA;AACA;;AACA,MAAMC,IAAI,GAAGR,KAAK,EAChB;AACA,CAAC;AAAES,EAAAA;AAAF,CAAD,KAAe;AACb,QAAMC,UAAU,GAAGR,iBAAiB,CAACO,KAAD,CAApC;AACA,SACEC,UAAU,CAACC,IAAX,KAAoB,qBAApB,IACAD,UAAU,CAACE,SAAX,KAAyB,cAF3B;AAID,CARe,EAShBP,MATgB,EAUhBF,QAVgB,CAAlB;AAYA,MAAMU,MAAM,GAAG,IAAIjB,YAAJ,CAAiB;AAC9BY,EAAAA,IAD8B;AAE9BM,EAAAA,KAAK,EAAE,IAAIjB,aAAJ,GAAoBkB,OAApB,CAA4B,EAA5B;AAFuB,CAAjB,CAAf;AAKAtB,QAAQ,CAACuB,MAAT,eACE,QAAC,KAAD,CAAO,UAAP;AAAA,yBACE,QAAC,cAAD;AAAgB,IAAA,MAAM,EAAEH,MAAxB;AAAA,2BACA,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADF,EAMEI,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CANF,E,CASA;AACA;AACA;;AACAvB,eAAe","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  HttpLink,\n} from \"@apollo/client\";\nimport { split } from \"apollo-link\";\nimport { WebSocketLink } from \"apollo-link-ws\";\nimport { getMainDefinition } from \"apollo-utilities\";\n// Create an http link:\nconst httpLink = new HttpLink({\n  uri: \"http://localhost:5000/\",\n});\n// Create a WebSocket link:\nconst wsLink = new WebSocketLink({\n  uri: `ws://localhost:5000/`,\n  options: { reconnect: true },\n});\n// using the ability to split links, you can send data to each link\n// depending on what kind of operation is being sent\nconst link = split(\n  // split based on operation type\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    return (\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'subscription'\n    );\n  },\n  wsLink,\n  httpLink,\n);\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache().restore({}),\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n    <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"]},"metadata":{},"sourceType":"module"}