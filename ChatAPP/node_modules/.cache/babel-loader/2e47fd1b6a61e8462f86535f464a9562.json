{"ast":null,"code":"import _toConsumableArray from\"D:/\\u78A9\\u4E00\\u4E0B/\\u7DB2\\u8DEF\\u670D\\u52D9/Chatroom GraphQL/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"D:/\\u78A9\\u4E00\\u4E0B/\\u7DB2\\u8DEF\\u670D\\u52D9/Chatroom GraphQL/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"D:/\\u78A9\\u4E00\\u4E0B/\\u7DB2\\u8DEF\\u670D\\u52D9/Chatroom GraphQL/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import\"../App.css\";import ChatModal from\"../component/chatModels\";//import useChatBox from \"../hooks/useChatBox\"\nimport{useQuery,useMutation,useSubscription}from'@apollo/react-hooks';import useChat from\"../hooks/useChat\";import{useState,useEffect}from\"react\";import{Tabs,Input}from\"antd\";import{CREATE_CHATBOX_MUTATION,CREATE_MESSAGE_MUTATION,CHATBOX_QUERY,MESSAGE_SUBSCRIPTION,AllMessage_Sub}from'../graphql';import{isTypeNode}from\"graphql\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var TabPane=Tabs.TabPane;var ChatRoom=function ChatRoom(_ref){var me=_ref.me,displayStatus=_ref.displayStatus;// const [chatBoxes, setChatBoxes] = useState([\n//     {\n//         friend: \"Mary\", key: \"MaryChatbox\",\n//         chatLog: []\n//     },\n//     {\n//         friend: \"Peter\", key: \"PeterChatBox\",\n//         chatLog: []\n//     }\n// ]);\nvar _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),name1=_useState2[0],setName1=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),name2=_useState4[0],setName2=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),ispush=_useState6[0],setIspush=_useState6[1];var _useState7=useState(\"\"),_useState8=_slicedToArray(_useState7,2),messageInput=_useState8[0],setMessageInput=_useState8[1];var _useState9=useState([]),_useState10=_slicedToArray(_useState9,2),chatBoxes=_useState10[0],setChatBoxes=_useState10[1];var _useState11=useState(false),_useState12=_slicedToArray(_useState11,2),modalVisible=_useState12[0],setModalVisible=_useState12[1];var addChatBox=function addChatBox(){setModalVisible(true);};var _useState13=useState(\"\"),_useState14=_slicedToArray(_useState13,2),activeKey=_useState14[0],setActiveKey=_useState14[1];console.log(activeKey);var _useMutation=useMutation(CREATE_CHATBOX_MUTATION),_useMutation2=_slicedToArray(_useMutation,1),addChat=_useMutation2[0];var _useMutation3=useMutation(CREATE_MESSAGE_MUTATION),_useMutation4=_slicedToArray(_useMutation3,1),addMessage=_useMutation4[0];var myname;var first;var second;useEffect(function(){console.log(\"active\");console.log(activeKey);if(activeKey){console.log(activeKey);myname=activeKey.split(\"_\");console.log(myname);if(myname[0]===me){first=myname[0];second=myname[1];}else{first=myname[1];second=myname[0];}setName1(first);setName2(second);}},[activeKey]);console.log(name2);var _useQuery=useQuery(CHATBOX_QUERY,{variables:{name1:name1,name2:name2// name1: \"jimmy\",\n// name2: \"peter\",\n}}),loading=_useQuery.loading,error=_useQuery.error,data=_useQuery.data,subscribeToMore=_useQuery.subscribeToMore;console.log(data);if(typeof data===\"undefined\"){console.log(\"111\");}// if(data.chatbox===null){\n//     console.log(\"null\")\n// }\nuseEffect(function(){console.log('11');subscribeToMore({document:AllMessage_Sub,// variables: {\n//     name1: name1,\n//     name2: name2,\n// },\nupdateQuery:function updateQuery(prev,_ref2){var subscriptionData=_ref2.subscriptionData;console.log('11');// console.log(prev.chatbox.messages)\n// console.log(subscriptionData)\n// let newchat = chatBoxes\n// if (!subscriptionData.data.allmessage) {\n//     console.log(\"12445789\")\n//     console.log(prev);\n//     newchat.push({ friend: name2, key: activeKey, chatLog: prev.chatbox.messages });\n//     console.log(newchat);\n//     setChatBoxes(newchat);\n//     return prev;\n// }\nvar newMess=subscriptionData.data.allmessage.data;// console.log(newMess);\n// newchat.push({ friend: name2, key: activeKey, chatLog: prev.chatbox.messages });\n// console.log(newchat);\n// setChatBoxes(newchat);\n// newchat = {friend : name2,key : activeKey ,chatLog : data};\nreturn _objectSpread(_objectSpread({},prev),{},{// posts: [newPost, ...prev.posts]\nchatbox:[].concat(_toConsumableArray(prev.chatbox.messages),[newMess])});}});// let newchat = {friend : name2,key : activeKey ,chatLog : data};\n// console.log(newchat)\n// console.log(\"123\")\n},[subscribeToMore]);var newbox=[];console.log(\"render\");console.log(chatBoxes);// useEffect(()=>{\n//     console.log(\"888\")\n//     console.log(data)\n//     if(typeof data !== \"undefined\" && data.chatbox !== null){\n//         console.log(\"888\")\n//         console.log(data)\n//         newbox = chatBoxes\n//         console.log(data.chatbox.messages)\n//         newbox.push({friend:name2,key:data.chatbox.name,chatLog:data.chatbox.messages});\n//         console.log(newbox)\n//     }\n// },[ispush])\n// const { loading, error, data  } = useSubscription(\n//     MESSAGE_SUBSCRIPTION,\n//     { variables: {\n//         name1: name1,\n//         name2: name2,\n//         } \n//     }\n//     );\n// console.log(data)\n//console.log(data2)\n// if(data.chatbox){\n//     let filter =data.chatbox.messages.map(e=>e.body)\n//     console.log(filter)\n// } \n//data will be unndeefined\n// const pushdata = (friend,me) => {\n//     chatBoxes.push({friend:friend,key:activeKey,chatLog:data.chatBox.messages});\n//     console.log(chatBoxes)\n// }\n//data will be unndeefined\n//msg.push(inputmsg[0]);\n// useEffect(() => {\n//     console.log('execute function in useEffect');\n//   },[inputmsg]);\nvar sendMessage=function sendMessage(payload){console.log(payload);// key:11_1 body:'messenge'\naddMessage({variables:{key:payload.key,body:payload.body,me:payload.sender}});// SendData({\n//     type: 'Message',\n//     data: { key: payload.key, body: payload.body, me: payload.sender },\n// })\n};//CHAT MODELS CALL\nvar createChatBox=function createChatBox(friend,me){//比對字串大小\n// const { loading, error, data,refetch,subscribeToMore } = useQuery(CHATBOX_QUERY,{\n//     variables: {\n//         name1: me,\n//         name2: friend,\n//     },\n// });\naddChat({variables:{name1:me,name2:friend}});setName1(me);setName2(friend);// pushdata(friend,me)\n// const newKey = me <= friend ?\n//     `${me}_${friend}` : `${friend}_${me}`;\nvar newKey=[me,friend].sort().join('_');console.log(newKey);if(chatBoxes.some(function(_ref3){var key=_ref3.key;return key===newKey;})){throw new Error(friend+\"'s chat box has already opened.\");}var newChatBoxes=_toConsumableArray(chatBoxes);var chatLog=[];newChatBoxes.push({friend:friend,key:newKey,chatLog:chatLog});setChatBoxes(newChatBoxes);setActiveKey(newKey);setIspush(true);};var removeChatBox=function removeChatBox(targetKey,activeKey){var newActiveKey=activeKey;//index before\nvar lastIndex;chatBoxes.forEach(function(_ref4,i){var key=_ref4.key;if(key===targetKey){lastIndex=i-1;}});var newChatBoxes=chatBoxes.filter(function(chatBox){return chatBox.key!==targetKey;});if(newChatBoxes.length){if(newActiveKey===targetKey){if(lastIndex>=0){newActiveKey=newChatBoxes[lastIndex].key;}else{newActiveKey=newChatBoxes[0].key;}}}else newActiveKey=\"\";//No chatBox left\nsetChatBoxes(newChatBoxes);setActiveKey(newActiveKey);};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"App-title\",children:/*#__PURE__*/_jsxs(\"h1\",{children:[me,\"'s Chat Room\"]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"App-messages\",children:[/*#__PURE__*/_jsx(Tabs,{type:\"editable-card\",activeKey:activeKey,onChange:function onChange(key){setActiveKey(key);alert(key);}//按+號時\n,onEdit:function onEdit(targetKey,action){if(action===\"add\")addChatBox();else if(action===\"remove\")removeChatBox(targetKey,activeKey,setActiveKey);},children:chatBoxes.map(function(_ref5){var friend=_ref5.friend,key=_ref5.key,chatLog=_ref5.chatLog;return/*#__PURE__*/_jsx(TabPane,{tab:friend,closable:true},key);})}),/*#__PURE__*/_jsx(ChatModal,{visible:modalVisible,onCreate:function onCreate(_ref6){var name=_ref6.name;createChatBox(name,me,setActiveKey);setModalVisible(false);},onCancel:function onCancel(){setModalVisible(false);}})]}),/*#__PURE__*/_jsx(Input.Search,{value:messageInput,onChange:function onChange(e){return setMessageInput(e.target.value);},enterButton:\"Send\",placeholder:\"Enter message here...\",onSearch:function onSearch(msg){if(!msg){displayStatus({type:\"error\",msg:\"Please enter message.\"});return;}else if(activeKey===\"\"){displayStatus({type:\"error\",msg:\"Please add a chatbox first.\"});setMessageInput(\"\");return;}sendMessage({key:activeKey,body:msg,sender:me});setMessageInput(\"\");}})]});};export default ChatRoom;","map":{"version":3,"sources":["D:/碩一下/網路服務/Chatroom GraphQL/src/container/chatroom.js"],"names":["ChatModal","useQuery","useMutation","useSubscription","useChat","useState","useEffect","Tabs","Input","CREATE_CHATBOX_MUTATION","CREATE_MESSAGE_MUTATION","CHATBOX_QUERY","MESSAGE_SUBSCRIPTION","AllMessage_Sub","isTypeNode","TabPane","ChatRoom","me","displayStatus","name1","setName1","name2","setName2","ispush","setIspush","messageInput","setMessageInput","chatBoxes","setChatBoxes","modalVisible","setModalVisible","addChatBox","activeKey","setActiveKey","console","log","addChat","addMessage","myname","first","second","split","variables","loading","error","data","subscribeToMore","document","updateQuery","prev","subscriptionData","newMess","allmessage","chatbox","messages","newbox","sendMessage","payload","key","body","sender","createChatBox","friend","newKey","sort","join","some","Error","newChatBoxes","chatLog","push","removeChatBox","targetKey","newActiveKey","lastIndex","forEach","i","filter","chatBox","length","alert","action","map","name","e","target","value","msg","type"],"mappings":"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","sourcesContent":["import \"../App.css\";\r\nimport ChatModal from \"../component/chatModels\"\r\n//import useChatBox from \"../hooks/useChatBox\"\r\nimport { useQuery, useMutation, useSubscription } from '@apollo/react-hooks';\r\nimport useChat from \"../hooks/useChat\"\r\nimport { useState, useEffect } from \"react\";\r\nimport { Tabs, Input } from \"antd\";\r\nimport {\r\n    CREATE_CHATBOX_MUTATION,\r\n    CREATE_MESSAGE_MUTATION,\r\n    CHATBOX_QUERY,\r\n    MESSAGE_SUBSCRIPTION,\r\n    AllMessage_Sub,\r\n} from '../graphql';\r\nimport { isTypeNode } from \"graphql\";\r\nconst { TabPane } = Tabs;\r\nconst ChatRoom = ({ me, displayStatus }) => {\r\n    // const [chatBoxes, setChatBoxes] = useState([\r\n    //     {\r\n    //         friend: \"Mary\", key: \"MaryChatbox\",\r\n    //         chatLog: []\r\n    //     },\r\n    //     {\r\n    //         friend: \"Peter\", key: \"PeterChatBox\",\r\n    //         chatLog: []\r\n    //     }\r\n    // ]);\r\n    const [name1, setName1] = useState(\"\");\r\n    const [name2, setName2] = useState(\"\");\r\n    const [ispush, setIspush] = useState(false);\r\n    const [messageInput, setMessageInput] = useState(\"\");\r\n    const [chatBoxes, setChatBoxes] = useState([]);\r\n    const [modalVisible, setModalVisible] = useState(false);\r\n    const addChatBox = () => { setModalVisible(true); };\r\n    const [activeKey, setActiveKey] = useState(\"\")\r\n    console.log(activeKey)\r\n    const [addChat] = useMutation(CREATE_CHATBOX_MUTATION);\r\n    const [addMessage] = useMutation(CREATE_MESSAGE_MUTATION);\r\n    let myname\r\n    let first\r\n    let second\r\n    useEffect(() => {\r\n        console.log(\"active\")\r\n        console.log(activeKey)\r\n        if (activeKey) {\r\n            console.log(activeKey)\r\n            myname = activeKey.split(\"_\")\r\n            console.log(myname)\r\n            if (myname[0] === me) {\r\n                first = myname[0]\r\n                second = myname[1]\r\n            }\r\n            else {\r\n                first = myname[1]\r\n                second = myname[0]\r\n            }\r\n            setName1(first)\r\n            setName2(second)\r\n        }\r\n\r\n    }, [activeKey])\r\n    console.log(name2)\r\n\r\n    const { loading, error, data, subscribeToMore } = useQuery(CHATBOX_QUERY, {\r\n        variables: {\r\n            name1: name1,\r\n            name2: name2,\r\n            // name1: \"jimmy\",\r\n            // name2: \"peter\",\r\n        },\r\n    })\r\n    console.log(data)\r\n    if (typeof (data) === \"undefined\") {\r\n        console.log(\"111\")\r\n    }\r\n    // if(data.chatbox===null){\r\n    //     console.log(\"null\")\r\n    // }\r\n    useEffect(() => {\r\n        console.log('11')\r\n        subscribeToMore({\r\n            document: AllMessage_Sub,\r\n            // variables: {\r\n            //     name1: name1,\r\n            //     name2: name2,\r\n            // },\r\n            updateQuery: (prev, { subscriptionData }) => {\r\n                console.log('11')\r\n                // console.log(prev.chatbox.messages)\r\n                // console.log(subscriptionData)\r\n                // let newchat = chatBoxes\r\n                // if (!subscriptionData.data.allmessage) {\r\n                //     console.log(\"12445789\")\r\n                //     console.log(prev);\r\n                //     newchat.push({ friend: name2, key: activeKey, chatLog: prev.chatbox.messages });\r\n                //     console.log(newchat);\r\n                //     setChatBoxes(newchat);\r\n                //     return prev;\r\n                // }\r\n                const newMess = subscriptionData.data.allmessage.data\r\n                // console.log(newMess);\r\n                // newchat.push({ friend: name2, key: activeKey, chatLog: prev.chatbox.messages });\r\n                // console.log(newchat);\r\n                // setChatBoxes(newchat);\r\n                // newchat = {friend : name2,key : activeKey ,chatLog : data};\r\n                return {\r\n                    ...prev,\r\n                    // posts: [newPost, ...prev.posts]\r\n                    chatbox: [...prev.chatbox.messages, newMess]\r\n                }\r\n            }\r\n        })\r\n\r\n        // let newchat = {friend : name2,key : activeKey ,chatLog : data};\r\n        // console.log(newchat)\r\n        // console.log(\"123\")\r\n    }, [subscribeToMore])\r\n\r\n\r\n    let newbox = []\r\n\r\n    console.log(\"render\")\r\n    console.log(chatBoxes)\r\n    // useEffect(()=>{\r\n    //     console.log(\"888\")\r\n    //     console.log(data)\r\n    //     if(typeof data !== \"undefined\" && data.chatbox !== null){\r\n    //         console.log(\"888\")\r\n    //         console.log(data)\r\n    //         newbox = chatBoxes\r\n    //         console.log(data.chatbox.messages)\r\n    //         newbox.push({friend:name2,key:data.chatbox.name,chatLog:data.chatbox.messages});\r\n    //         console.log(newbox)\r\n    //     }\r\n    // },[ispush])\r\n\r\n\r\n\r\n    // const { loading, error, data  } = useSubscription(\r\n    //     MESSAGE_SUBSCRIPTION,\r\n    //     { variables: {\r\n    //         name1: name1,\r\n    //         name2: name2,\r\n    //         } \r\n    //     }\r\n    //     );\r\n    // console.log(data)\r\n    //console.log(data2)\r\n\r\n\r\n\r\n    // if(data.chatbox){\r\n    //     let filter =data.chatbox.messages.map(e=>e.body)\r\n    //     console.log(filter)\r\n    // } \r\n\r\n    //data will be unndeefined\r\n    // const pushdata = (friend,me) => {\r\n    //     chatBoxes.push({friend:friend,key:activeKey,chatLog:data.chatBox.messages});\r\n    //     console.log(chatBoxes)\r\n    // }\r\n    //data will be unndeefined\r\n\r\n    //msg.push(inputmsg[0]);\r\n    // useEffect(() => {\r\n    //     console.log('execute function in useEffect');\r\n    //   },[inputmsg]);\r\n\r\n    const sendMessage = (payload) => {\r\n        console.log(payload);// key:11_1 body:'messenge'\r\n        addMessage({\r\n            variables: {\r\n                key: payload.key,\r\n                body: payload.body,\r\n                me: payload.sender,\r\n            },\r\n        });\r\n\r\n        // SendData({\r\n        //     type: 'Message',\r\n        //     data: { key: payload.key, body: payload.body, me: payload.sender },\r\n        // })\r\n    };\r\n    //CHAT MODELS CALL\r\n    const createChatBox = (friend, me) => {\r\n        //比對字串大小\r\n        // const { loading, error, data,refetch,subscribeToMore } = useQuery(CHATBOX_QUERY,{\r\n        //     variables: {\r\n        //         name1: me,\r\n        //         name2: friend,\r\n        //     },\r\n        // });\r\n        addChat({\r\n            variables: {\r\n                name1: me,\r\n                name2: friend,\r\n            },\r\n        });\r\n        setName1(me);\r\n        setName2(friend);\r\n\r\n\r\n\r\n        // pushdata(friend,me)\r\n        // const newKey = me <= friend ?\r\n        //     `${me}_${friend}` : `${friend}_${me}`;\r\n        const newKey = [me, friend].sort().join('_');\r\n        console.log(newKey)\r\n        if (chatBoxes.some(({ key }) => key === newKey)) {\r\n            throw new Error(friend +\r\n                \"'s chat box has already opened.\");\r\n        }\r\n        const newChatBoxes = [...chatBoxes];\r\n        const chatLog = [];\r\n        newChatBoxes.push({ friend, key: newKey, chatLog });\r\n        setChatBoxes(newChatBoxes);\r\n        setActiveKey(newKey);\r\n        setIspush(true);\r\n    };\r\n    const removeChatBox = (targetKey, activeKey) => {\r\n        let newActiveKey = activeKey;\r\n        //index before\r\n        let lastIndex;\r\n        chatBoxes.forEach(({ key }, i) => {\r\n            if (key === targetKey) { lastIndex = i - 1; }\r\n        });\r\n        const newChatBoxes = chatBoxes.filter(\r\n            (chatBox) => chatBox.key !== targetKey);\r\n        if (newChatBoxes.length) {\r\n            if (newActiveKey === targetKey) {\r\n                if (lastIndex >= 0) {\r\n                    newActiveKey = newChatBoxes[lastIndex].key;\r\n                } else { newActiveKey = newChatBoxes[0].key; }\r\n            }\r\n        } else newActiveKey = \"\";\r\n        //No chatBox left\r\n        setChatBoxes(newChatBoxes);\r\n        setActiveKey(newActiveKey);\r\n\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"App-title\">\r\n                <h1>{me}'s Chat Room</h1>\r\n            </div>\r\n            <div className=\"App-messages\">\r\n                <Tabs type=\"editable-card\"\r\n                    activeKey={activeKey}\r\n                    onChange={(key) => { setActiveKey(key);  alert(key)}}\r\n\r\n                    //按+號時\r\n                    onEdit={(targetKey, action) => {\r\n                        if (action === \"add\") addChatBox();\r\n                        else if (action === \"remove\") removeChatBox(targetKey, activeKey, setActiveKey)\r\n                    }}\r\n                >\r\n                    {chatBoxes.map(({ friend, key, chatLog }) => {\r\n                        return (\r\n                            <TabPane tab={friend}\r\n                                key={key} closable={true}>\r\n                                {/* {(typeof (data) === \"undefined\" || data.chatbox === null) ? (<p>Loading...</p>) :\r\n                                    (data.chatbox.messages.length === 0 ? (<p>NO MESSAGE..</p>) : (\r\n                                        data.chatbox.messages.map(({ sender, body }, i) => {\r\n                                            if (sender[0].name !== me) {\r\n                                                return (\r\n                                                    <p >{sender[0].name}:{body}</p>\r\n                                                )\r\n                                            }\r\n                                            else {\r\n                                                return (\r\n                                                    <p style={{ textAlign: \"right\" }}>{body}:{sender[0].name}</p>\r\n                                                )\r\n                                            }\r\n                                        })\r\n                                    ))} */}\r\n                            </TabPane>\r\n                        );\r\n                    }\r\n                    )}\r\n\r\n                    {/* {(typeof(data) ===\"undefined\" || data.chatbox===null)?(<p>Loading ...</p>):\r\n            (data.chatbox.messages.length===0 ?\r\n                (<p style={{ color: '#ccc' }}>No messages...</p>):\r\n                (data.chatbox.messages.map(({sender,body},i)=>{\r\n                    if(sender.name!==me){\r\n                        return (\r\n                            <div className=\"bubbleWrapper\" key={i}>\r\n                                <div className=\"inlineContainer\">\r\n                                    <p>{sender.name}:{body}</p>\r\n                                </div>\r\n                            </div>)\r\n                    }\r\n                    else{\r\n                        return (\r\n                            <div className=\"bubbleWrapper\" key={i}>\r\n                                <div className=\"inlineContainer own\">\r\n                                     <p>{sender.name}:{body}</p>\r\n                                </div>\r\n                            </div>)\r\n                    }\r\n                })\r\n                )\r\n            )} */}\r\n                    {/* {\r\n                            msg.map(({ body, name })=>{\r\n                                return (\r\n                                    <TabPane tab={name }\r\n                                         closable={true}>\r\n                                        <p>{name}:{body}</p>\r\n                                    </TabPane>\r\n                                );\r\n                            })\r\n                    } */}\r\n                </Tabs>\r\n                <ChatModal\r\n                    visible={modalVisible}\r\n                    onCreate={({ name }) => {\r\n                        createChatBox(name, me, setActiveKey);\r\n                        setModalVisible(false);\r\n                    }}\r\n                    onCancel={() => {\r\n                        setModalVisible(false);\r\n                    }}\r\n                />\r\n\r\n            </div>\r\n            <Input.Search\r\n                value={messageInput}\r\n                onChange={(e) =>\r\n                    setMessageInput(e.target.value)}\r\n                enterButton=\"Send\"\r\n                placeholder=\r\n                \"Enter message here...\"\r\n                onSearch={(msg) => {\r\n                    if (!msg) {\r\n                        displayStatus({\r\n                            type: \"error\",\r\n                            msg: \"Please enter message.\",\r\n                        });\r\n                        return;\r\n                    } else if (activeKey === \"\") {\r\n                        displayStatus({\r\n                            type: \"error\",\r\n                            msg: \"Please add a chatbox first.\",\r\n                        });\r\n                        setMessageInput(\"\");\r\n                        return;\r\n                    }\r\n                    sendMessage({ key: activeKey, body: msg, sender: me });\r\n                    setMessageInput(\"\");\r\n                }}\r\n            >\r\n            </Input.Search>\r\n        </>\r\n    )\r\n\r\n}\r\nexport default ChatRoom;"]},"metadata":{},"sourceType":"module"}