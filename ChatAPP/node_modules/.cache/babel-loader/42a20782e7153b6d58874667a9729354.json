{"ast":null,"code":"import React from'react';import ReactDOM from'react-dom';import'antd/dist/antd.css';import'./index.css';import App from'./App';import reportWebVitals from'./reportWebVitals';import{ApolloClient,InMemoryCache,ApolloProvider,HttpLink}from\"@apollo/client\";import{split}from\"apollo-link\";import{WebSocketLink}from\"apollo-link-ws\";import{getMainDefinition}from\"apollo-utilities\";// Create an http link:\nimport{jsx as _jsx}from\"react/jsx-runtime\";var httpLink=new HttpLink({uri:\"http://localhost:5000/\"});// Create a WebSocket link:\nvar wsLink=new WebSocketLink({uri:\"ws://localhost:5000/\",options:{reconnect:true}});// using the ability to split links, you can send data to each link\n// depending on what kind of operation is being sent\nvar link=split(// split based on operation type\nfunction(_ref){var query=_ref.query;var definition=getMainDefinition(query);return definition.kind==='OperationDefinition'&&definition.operation==='subscription';},wsLink,httpLink);var client=new ApolloClient({link:link,cache:new InMemoryCache().restore({})});ReactDOM.render(/*#__PURE__*/_jsx(React.StrictMode,{children:/*#__PURE__*/_jsx(ApolloProvider,{client:client,children:/*#__PURE__*/_jsx(App,{})})}),document.getElementById('root'));// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","map":{"version":3,"sources":["D:/碩一下/網路服務/Chatroom GraphQL/src/index.js"],"names":["React","ReactDOM","App","reportWebVitals","ApolloClient","InMemoryCache","ApolloProvider","HttpLink","split","WebSocketLink","getMainDefinition","httpLink","uri","wsLink","options","reconnect","link","query","definition","kind","operation","client","cache","restore","render","document","getElementById"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,QAAP,KAAqB,WAArB,CACA,MAAO,oBAAP,CACA,MAAO,aAAP,CACA,MAAOC,CAAAA,GAAP,KAAgB,OAAhB,CACA,MAAOC,CAAAA,eAAP,KAA4B,mBAA5B,CACA,OACEC,YADF,CAEEC,aAFF,CAGEC,cAHF,CAIEC,QAJF,KAKO,gBALP,CAMA,OAASC,KAAT,KAAsB,aAAtB,CACA,OAASC,aAAT,KAA8B,gBAA9B,CACA,OAASC,iBAAT,KAAkC,kBAAlC,CACA;2CACA,GAAMC,CAAAA,QAAQ,CAAG,GAAIJ,CAAAA,QAAJ,CAAa,CAC5BK,GAAG,CAAE,wBADuB,CAAb,CAAjB,CAGA;AACA,GAAMC,CAAAA,MAAM,CAAG,GAAIJ,CAAAA,aAAJ,CAAkB,CAC/BG,GAAG,uBAD4B,CAE/BE,OAAO,CAAE,CAAEC,SAAS,CAAE,IAAb,CAFsB,CAAlB,CAAf,CAIA;AACA;AACA,GAAMC,CAAAA,IAAI,CAAGR,KAAK,CAChB;AACA,cAAe,IAAZS,CAAAA,KAAY,MAAZA,KAAY,CACb,GAAMC,CAAAA,UAAU,CAAGR,iBAAiB,CAACO,KAAD,CAApC,CACA,MACEC,CAAAA,UAAU,CAACC,IAAX,GAAoB,qBAApB,EACAD,UAAU,CAACE,SAAX,GAAyB,cAF3B,CAID,CARe,CAShBP,MATgB,CAUhBF,QAVgB,CAAlB,CAYA,GAAMU,CAAAA,MAAM,CAAG,GAAIjB,CAAAA,YAAJ,CAAiB,CAC9BY,IAAI,CAAJA,IAD8B,CAE9BM,KAAK,CAAE,GAAIjB,CAAAA,aAAJ,GAAoBkB,OAApB,CAA4B,EAA5B,CAFuB,CAAjB,CAAf,CAKAtB,QAAQ,CAACuB,MAAT,cACE,KAAC,KAAD,CAAO,UAAP,wBACE,KAAC,cAAD,EAAgB,MAAM,CAAEH,MAAxB,uBACA,KAAC,GAAD,IADA,EADF,EADF,CAMEI,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CANF,EASA;AACA;AACA;AACAvB,eAAe","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  HttpLink,\n} from \"@apollo/client\";\nimport { split } from \"apollo-link\";\nimport { WebSocketLink } from \"apollo-link-ws\";\nimport { getMainDefinition } from \"apollo-utilities\";\n// Create an http link:\nconst httpLink = new HttpLink({\n  uri: \"http://localhost:5000/\",\n});\n// Create a WebSocket link:\nconst wsLink = new WebSocketLink({\n  uri: `ws://localhost:5000/`,\n  options: { reconnect: true },\n});\n// using the ability to split links, you can send data to each link\n// depending on what kind of operation is being sent\nconst link = split(\n  // split based on operation type\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    return (\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'subscription'\n    );\n  },\n  wsLink,\n  httpLink,\n);\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache().restore({}),\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n    <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"]},"metadata":{},"sourceType":"module"}