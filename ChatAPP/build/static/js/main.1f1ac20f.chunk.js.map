{"version":3,"sources":["container/signin.js","component/chatModels.js","graphql/mutation.js","graphql/Mutationmess.js","graphql/query.js","graphql/allmesssub.js","graphql/messagesubscribe.js","container/chatroom.js","App.js","reportWebVitals.js","index.js"],"names":["SignIn","me","setMe","setSignIn","displayStatus","className","Search","prefix","UserOutlined","value","enterButton","onChange","e","target","placeholder","size","style","width","margin","onSearch","name","type","msg","ChatModal","visible","onCreate","onCancel","Form","useForm","form","title","okText","cancelText","onOk","validateFields","then","values","resetFields","catch","window","alert","layout","Item","label","rules","required","message","CREATE_CHATBOX_MUTATION","gql","CREATE_MESSAGE_MUTATION","CHATBOX_QUERY","AllMessage_Sub","TabPane","Tabs","ChatRoom","useState","name1","setName1","name2","setName2","setIspush","messageInput","setMessageInput","chatBoxes","setChatBoxes","modalVisible","setModalVisible","activeKey","setActiveKey","console","log","myname","first","second","useMutation","addChat","addMessage","useEffect","split","useQuery","variables","data","loading","error","subscribeToMore","document","updateQuery","prev","subscriptionData","newMess","allmessage","chatbox","messages","key","onEdit","targetKey","action","lastIndex","newActiveKey","forEach","i","newChatBoxes","filter","chatBox","length","removeChatBox","map","friend","chatLog","tab","closable","sender","body","color","textAlign","newKey","sort","join","some","Error","push","createChatBox","payload","LOCALSTORAGE_KEY","App","signIn","savedMe","localStorage","getItem","content","duration","success","setItem","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","url","URL","location","href","httpLink","HttpLink","uri","wsLink","WebSocketLink","replace","options","reconnect","link","query","definition","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","restore","ReactDOM","render","StrictMode","ApolloProvider","getElementById"],"mappings":"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","file":"static/js/main.1f1ac20f.chunk.js","sourcesContent":["import \"../App.css\";\r\nimport { Input } from \"antd\";\r\nimport { UserOutlined } from \"@ant-design/icons\";\r\nconst SignIn = ({ me, setMe, setSignIn ,displayStatus}) => (\r\n    <>\r\n        <div className=\"App-title\">\r\n            <h1>My Chat Room</h1>\r\n        </div>\r\n        <Input.Search\r\n            prefix={<UserOutlined />}\r\n            value={me}\r\n            enterButton=\"Sign In\"\r\n            onChange={(e) => setMe(e.target.value)}\r\n            placeholder=\"Enter your name\"\r\n            size=\"large\"\r\n            style={{ width: 300, margin: 50 }}\r\n            onSearch={(name) => {\r\n                if (!name) displayStatus({\r\n                    type: \"error\",\r\n                    msg: \"Missing user name\",\r\n                });\r\n                else {\r\n                    displayStatus({\r\n                        type: \"success\",\r\n                        msg: \"success\",\r\n                    });\r\n                    setSignIn(true);\r\n                }\r\n\r\n            }}\r\n        >\r\n        </Input.Search>\r\n    </>\r\n)\r\nexport default SignIn;","import { Modal, Form, Input } from \"antd\";\r\n\r\nconst ChatModal = ({ visible, onCreate,onCancel }) => {\r\n    const [form] = Form.useForm();\r\n    return (\r\n        <Modal\r\n            visible={visible}\r\n            title=\"Create a new chat room\"\r\n            okText=\"Create\" cancelText=\"Cancel\"\r\n            onCancel={onCancel}\r\n            onOk={() => {\r\n                form.validateFields().then((values) => {\r\n                    form.resetFields();\r\n                    onCreate(values);\r\n                }).catch((e) => { window.alert(e); });\r\n            }}>\r\n            <Form form={form} layout=\"vertical\"\r\n                name=\"form_in_modal\">\r\n                <Form.Item\r\n                    name=\"name\" label=\"Name\"\r\n                    rules={[{\r\n                        required: true,\r\n                        message: \"Error: Please enter the name of the person to chat!\",\r\n                    },]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n            </Form>\r\n        </Modal>\r\n    );\r\n};\r\nexport default ChatModal\r\n\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const CREATE_CHATBOX_MUTATION = gql`\r\nmutation\r\n    createChatBox( $name1:String,$name2:String){\r\n        createChatBox(name1:$name1,name2:$name2){\r\n            _id\r\n          name\r\n          messages{\r\n                body\r\n                sender{\r\n              name\r\n            }\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n`;","import { gql } from '@apollo/client';\r\n\r\nexport const CREATE_MESSAGE_MUTATION = gql`\r\nmutation\r\n    createMessage( $key:String,$body:String,$me:String){\r\n        createMessage(key:$key,body:$body,me:$me){\r\n            body\r\n            sender{\r\n              name\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n`;","import { gql } from '@apollo/client';\r\n\r\nexport const CHATBOX_QUERY = gql`\r\nquery\r\n    chatbox( $name1:String,$name2:String){\r\n        chatbox(name1:$name1,name2:$name2){\r\n          name\r\n          messages{\r\n                body\r\n                sender{\r\n              name\r\n            }\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n`;","import { gql } from '@apollo/client';\r\n\r\nexport const AllMessage_Sub = gql`\r\n  subscription {\r\n    allmessage {\r\n        mutation\r\n        data {\r\n            body\r\n            sender{\r\n              name\r\n            }             \r\n        }\r\n    }\r\n  }\r\n`;\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const MESSAGE_SUBSCRIPTION = gql`\r\nsubscription \r\n    message ($name1:String,$name2:String) {\r\n        message (name1:$name1,name2:$name2){\r\n            mutation\r\n            data {\r\n                body\r\n                sender{\r\n                  name\r\n                }             \r\n            }\r\n\r\n        }\r\n     \r\n    }\r\n\r\n`;\r\n","import \"../App.css\";\r\nimport ChatModal from \"../component/chatModels\"\r\n//import useChatBox from \"../hooks/useChatBox\"\r\nimport { useQuery, useMutation, useSubscription } from '@apollo/react-hooks';\r\nimport useChat from \"../hooks/useChat\"\r\nimport { useState, useEffect } from \"react\";\r\nimport { Tabs, Input ,Tag } from \"antd\";\r\nimport {\r\n    CREATE_CHATBOX_MUTATION,\r\n    CREATE_MESSAGE_MUTATION,\r\n    CHATBOX_QUERY,\r\n    MESSAGE_SUBSCRIPTION,\r\n    AllMessage_Sub,\r\n} from '../graphql';\r\nimport { isTypeNode } from \"graphql\";\r\nconst { TabPane } = Tabs;\r\nconst ChatRoom = ({ me, displayStatus }) => {\r\n    // const [chatBoxes, setChatBoxes] = useState([\r\n    //     {\r\n    //         friend: \"Mary\", key: \"MaryChatbox\",\r\n    //         chatLog: []\r\n    //     },\r\n    //     {\r\n    //         friend: \"Peter\", key: \"PeterChatBox\",\r\n    //         chatLog: []\r\n    //     }\r\n    // ]);\r\n    const [name1, setName1] = useState(\"\");\r\n    const [name2, setName2] = useState(\"\");\r\n    const [ispush, setIspush] = useState(false);\r\n    const [messageInput, setMessageInput] = useState(\"\");\r\n    const [chatBoxes, setChatBoxes] = useState([]);\r\n    const [modalVisible, setModalVisible] = useState(false);\r\n    const addChatBox = () => { setModalVisible(true); };\r\n    const [activeKey, setActiveKey] = useState(\"\")\r\n    console.log(activeKey)\r\n    const [addChat] = useMutation(CREATE_CHATBOX_MUTATION);\r\n    const [addMessage] = useMutation(CREATE_MESSAGE_MUTATION);\r\n    let myname\r\n    let first\r\n    let second\r\n    useEffect(() => {\r\n        console.log(\"active\")\r\n        console.log(activeKey)\r\n        if (activeKey) {\r\n            console.log(activeKey)\r\n            myname = activeKey.split(\"_\")\r\n            console.log(myname)\r\n            if (myname[0] === me) {\r\n                first = myname[0]\r\n                second = myname[1]\r\n            }\r\n            else {\r\n                first = myname[1]\r\n                second = myname[0]\r\n            }\r\n            setName1(first)\r\n            setName2(second)\r\n        }\r\n\r\n    }, [activeKey])\r\n    console.log(name2)\r\n\r\n    const { loading, error, data, subscribeToMore } = useQuery(CHATBOX_QUERY, {\r\n        variables: {\r\n            name1: name1,\r\n            name2: name2,\r\n            // name1: \"jimmy\",\r\n            // name2: \"peter\",\r\n        },\r\n    })\r\n    console.log(data)\r\n    if (typeof (data) === \"undefined\") {\r\n        console.log(\"111\")\r\n    }\r\n    // if(data.chatbox===null){\r\n    //     console.log(\"null\")\r\n    // }\r\n    useEffect(() => {\r\n        console.log('11')\r\n        subscribeToMore({\r\n            document: AllMessage_Sub,\r\n            // variables: {\r\n            //     name1: name1,\r\n            //     name2: name2,\r\n            // },\r\n            updateQuery: (prev, { subscriptionData }) => {\r\n                console.log('11')\r\n                // console.log(prev.chatbox.messages)\r\n                // console.log(subscriptionData)\r\n                // let newchat = chatBoxes\r\n                // if (!subscriptionData.data.allmessage) {\r\n                //     console.log(\"12445789\")\r\n                //     console.log(prev);\r\n                //     newchat.push({ friend: name2, key: activeKey, chatLog: prev.chatbox.messages });\r\n                //     console.log(newchat);\r\n                //     setChatBoxes(newchat);\r\n                //     return prev;\r\n                // }\r\n                const newMess = subscriptionData.data.allmessage.data\r\n                // console.log(newMess);\r\n                // newchat.push({ friend: name2, key: activeKey, chatLog: prev.chatbox.messages });\r\n                // console.log(newchat);\r\n                // setChatBoxes(newchat);\r\n                // newchat = {friend : name2,key : activeKey ,chatLog : data};\r\n                return {\r\n                    ...prev,\r\n                    // posts: [newPost, ...prev.posts]\r\n                    chatbox: [...prev.chatbox.messages, newMess]\r\n                }\r\n            }\r\n        })\r\n\r\n        // let newchat = {friend : name2,key : activeKey ,chatLog : data};\r\n        // console.log(newchat)\r\n        // console.log(\"123\")\r\n    }, [subscribeToMore])\r\n\r\n\r\n    let newbox = []\r\n\r\n    console.log(\"render\")\r\n    console.log(chatBoxes)\r\n    // useEffect(()=>{\r\n    //     console.log(\"888\")\r\n    //     console.log(data)\r\n    //     if(typeof data !== \"undefined\" && data.chatbox !== null){\r\n    //         console.log(\"888\")\r\n    //         console.log(data)\r\n    //         newbox = chatBoxes\r\n    //         console.log(data.chatbox.messages)\r\n    //         newbox.push({friend:name2,key:data.chatbox.name,chatLog:data.chatbox.messages});\r\n    //         console.log(newbox)\r\n    //     }\r\n    // },[ispush])\r\n\r\n\r\n\r\n    // const { loading, error, data  } = useSubscription(\r\n    //     MESSAGE_SUBSCRIPTION,\r\n    //     { variables: {\r\n    //         name1: name1,\r\n    //         name2: name2,\r\n    //         } \r\n    //     }\r\n    //     );\r\n    // console.log(data)\r\n    //console.log(data2)\r\n\r\n\r\n\r\n    // if(data.chatbox){\r\n    //     let filter =data.chatbox.messages.map(e=>e.body)\r\n    //     console.log(filter)\r\n    // } \r\n\r\n    //data will be unndeefined\r\n    // const pushdata = (friend,me) => {\r\n    //     chatBoxes.push({friend:friend,key:activeKey,chatLog:data.chatBox.messages});\r\n    //     console.log(chatBoxes)\r\n    // }\r\n    //data will be unndeefined\r\n\r\n    //msg.push(inputmsg[0]);\r\n    // useEffect(() => {\r\n    //     console.log('execute function in useEffect');\r\n    //   },[inputmsg]);\r\n\r\n    const sendMessage = (payload) => {\r\n        console.log(payload);// key:11_1 body:'messenge'\r\n        addMessage({\r\n            variables: {\r\n                key: payload.key,\r\n                body: payload.body,\r\n                me: payload.sender,\r\n            },\r\n        });\r\n\r\n        // SendData({\r\n        //     type: 'Message',\r\n        //     data: { key: payload.key, body: payload.body, me: payload.sender },\r\n        // })\r\n    };\r\n    //CHAT MODELS CALL\r\n    const createChatBox = (friend, me) => {\r\n        //比對字串大小\r\n        // const { loading, error, data,refetch,subscribeToMore } = useQuery(CHATBOX_QUERY,{\r\n        //     variables: {\r\n        //         name1: me,\r\n        //         name2: friend,\r\n        //     },\r\n        // });\r\n        addChat({\r\n            variables: {\r\n                name1: me,\r\n                name2: friend,\r\n            },\r\n        });\r\n        setName1(me);\r\n        setName2(friend);\r\n\r\n\r\n\r\n        // pushdata(friend,me)\r\n        // const newKey = me <= friend ?\r\n        //     `${me}_${friend}` : `${friend}_${me}`;\r\n        const newKey = [me, friend].sort().join('_');\r\n        console.log(newKey)\r\n        if (chatBoxes.some(({ key }) => key === newKey)) {\r\n            throw new Error(friend +\r\n                \"'s chat box has already opened.\");\r\n        }\r\n        const newChatBoxes = [...chatBoxes];\r\n        const chatLog = [];\r\n        newChatBoxes.push({ friend, key: newKey, chatLog });\r\n        setChatBoxes(newChatBoxes);\r\n        setActiveKey(newKey);\r\n        setIspush(true);\r\n    };\r\n    const removeChatBox = (targetKey, activeKey) => {\r\n        let newActiveKey = activeKey;\r\n        //index before\r\n        let lastIndex;\r\n        chatBoxes.forEach(({ key }, i) => {\r\n            if (key === targetKey) { lastIndex = i - 1; }\r\n        });\r\n        const newChatBoxes = chatBoxes.filter(\r\n            (chatBox) => chatBox.key !== targetKey);\r\n        if (newChatBoxes.length) {\r\n            if (newActiveKey === targetKey) {\r\n                if (lastIndex >= 0) {\r\n                    newActiveKey = newChatBoxes[lastIndex].key;\r\n                } else { newActiveKey = newChatBoxes[0].key; }\r\n            }\r\n        } else newActiveKey = \"\";\r\n        //No chatBox left\r\n        setChatBoxes(newChatBoxes);\r\n        setActiveKey(newActiveKey);\r\n\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"App-title\">\r\n                <h1>{me}'s Chat Room</h1>\r\n            </div>\r\n            <div className=\"App-messages\">\r\n                <Tabs type=\"editable-card\"\r\n                    activeKey={activeKey}\r\n                    onChange={(key) => { setActiveKey(key);  alert(key)}}\r\n\r\n                    //按+號時\r\n                    onEdit={(targetKey, action) => {\r\n                        if (action === \"add\") addChatBox();\r\n                        else if (action === \"remove\") removeChatBox(targetKey, activeKey, setActiveKey)\r\n                    }}\r\n                >\r\n                    {chatBoxes.map(({ friend, key, chatLog }) => {\r\n                        return (\r\n                            <TabPane tab={friend}\r\n                                key={key} closable={true}>\r\n                                {(typeof (data) === \"undefined\" || data.chatbox === null) ? (<p>Loading...</p>) :\r\n                                    (data.chatbox.messages.length === 0 ? (<p>NO MESSAGE..</p>) : (\r\n                                        data.chatbox.messages.map(({ sender, body }, i) => {\r\n                                            if (sender[0].name !== me) {\r\n                                                return (\r\n                                                    <p ><Tag color = \"blue\" >{sender[0].name}</Tag>:{body}</p>\r\n                                                )\r\n                                            }\r\n                                            else {\r\n                                                return (\r\n                                                    <p style={{ textAlign: \"right\" }}>{body}:<Tag color = \"blue\" >{sender[0].name}</Tag></p>\r\n                                                )\r\n                                            }\r\n                                        })\r\n                                    ))}\r\n                            </TabPane>\r\n                        );\r\n                    }\r\n                    )}\r\n                    \r\n                    {/* {(typeof(data) ===\"undefined\" || data.chatbox===null)?(<p>Loading ...</p>):\r\n            (data.chatbox.messages.length===0 ?\r\n                (<p style={{ color: '#ccc' }}>No messages...</p>):\r\n                (data.chatbox.messages.map(({sender,body},i)=>{\r\n                    if(sender.name!==me){\r\n                        return (\r\n                            <div className=\"bubbleWrapper\" key={i}>\r\n                                <div className=\"inlineContainer\">\r\n                                    <p>{sender.name}:{body}</p>\r\n                                </div>\r\n                            </div>)\r\n                    }\r\n                    else{\r\n                        return (\r\n                            <div className=\"bubbleWrapper\" key={i}>\r\n                                <div className=\"inlineContainer own\">\r\n                                     <p>{sender.name}:{body}</p>\r\n                                </div>\r\n                            </div>)\r\n                    }\r\n                })\r\n                )\r\n            )} */}\r\n                    {/* {\r\n                            msg.map(({ body, name })=>{\r\n                                return (\r\n                                    <TabPane tab={name }\r\n                                         closable={true}>\r\n                                        <p>{name}:{body}</p>\r\n                                    </TabPane>\r\n                                );\r\n                            })\r\n                    } */}\r\n                </Tabs>\r\n                <ChatModal\r\n                    visible={modalVisible}\r\n                    onCreate={({ name }) => {\r\n                        createChatBox(name, me, setActiveKey);\r\n                        setModalVisible(false);\r\n                    }}\r\n                    onCancel={() => {\r\n                        setModalVisible(false);\r\n                    }}\r\n                />\r\n\r\n            </div>\r\n            <Input.Search\r\n                value={messageInput}\r\n                onChange={(e) =>\r\n                    setMessageInput(e.target.value)}\r\n                enterButton=\"Send\"\r\n                placeholder=\r\n                \"Enter message here...\"\r\n                onSearch={(msg) => {\r\n                    if (!msg) {\r\n                        displayStatus({\r\n                            type: \"error\",\r\n                            msg: \"Please enter message.\",\r\n                        });\r\n                        return;\r\n                    } else if (activeKey === \"\") {\r\n                        displayStatus({\r\n                            type: \"error\",\r\n                            msg: \"Please add a chatbox first.\",\r\n                        });\r\n                        setMessageInput(\"\");\r\n                        return;\r\n                    }\r\n                    sendMessage({ key: activeKey, body: msg, sender: me });\r\n                    setMessageInput(\"\");\r\n                }}\r\n            >\r\n            </Input.Search>\r\n        </>\r\n    )\r\n\r\n}\r\nexport default ChatRoom;","import './App.css';\nimport SignIn from './container/signin';\nimport ChatRoom from './container/chatroom'\nimport { useState, useEffect } from \"react\";\nimport { message } from \"antd\"\nconst LOCALSTORAGE_KEY = \"save-me\";\nconst App = () => {\n\tconst [signIn, setSignIn] = useState(false);\n\tconst savedMe = localStorage.getItem(LOCALSTORAGE_KEY);\n\tconst [me, setMe] = useState(savedMe || \"\");\n\tconst displayStatus = (payload) => {\n\t\tif (payload.msg) {\n\t\t\tconst { type, msg } = payload\n\t\t\t//console.log(payload)\n\t\t\tconst content = {\n\t\t\t\tcontent: msg, duration: 1\n\t\t\t}\n\t\t\tswitch (type) {\n\t\t\t\tcase 'success':\n\t\t\t\t\tmessage.success(content)\n\t\t\t\t\tbreak\n\t\t\t\tcase 'error':\n\t\t\t\tdefault:\n\t\t\t\t\tmessage.error(content)\n\t\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\tuseEffect(() => {\n\t\tif (signIn) {\n\t\t\tlocalStorage.setItem(LOCALSTORAGE_KEY, me);\n\t\t}\n\t},[signIn])\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t{signIn ? (<ChatRoom me={me} displayStatus = {displayStatus}/>) : (<SignIn setMe={setMe} me={me} setSignIn={setSignIn} displayStatus={displayStatus} />)}\n\t\t</div>\n\t);\n\n};\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  HttpLink,\n} from \"@apollo/client\";\nimport { split } from \"apollo-link\";\nimport { WebSocketLink } from \"apollo-link-ws\";\nimport { getMainDefinition } from \"apollo-utilities\";\nconst url = new URL(\"/graphql\", window.location.href);\n// Create an http link:\nconst httpLink = new HttpLink({\n  uri: url.href,\n});\n// Create a WebSocket link:\nconst wsLink = new WebSocketLink({\n  uri: url.href.replace(\"http\", \"ws\"),\n  options: { reconnect: true },\n});\n// using the ability to split links, you can send data to each link\n// depending on what kind of operation is being sent\nconst link = split(\n  // split based on operation type\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    return (\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'subscription'\n    );\n  },\n  wsLink,\n  httpLink,\n);\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache().restore({}),\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n    <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}